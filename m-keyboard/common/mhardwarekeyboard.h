/* * This file is part of m-keyboard *
 *
 * Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 * All rights reserved.
 * Contact: Nokia Corporation (directui@nokia.com)
 *
 * If you have questions regarding the use of this file, please contact
 * Nokia at directui@nokia.com.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * and appearing in the file LICENSE.LGPL included in the packaging
 * of this file.
 */



#ifndef MHARDWAREKEYBOARD_H
#define MHARDWAREKEYBOARD_H

#include <QObject>
#include <QMap>
#include "mxkb.h"
#include "hwkbcharloopsmanager.h"
#include "mkeyboardcommon.h"
#include "keyevent.h"
#include <MNamespace>

class QKeyEvent;
class MVirtualKeyboard;

/*!
  \brief MHardwareKeyboard implement the hardware keyboard for inputmethod plugin.

  Class MHardwareKeyboard provides some functionality for hardware keyboard, e.g. recording input sensitive
  modifiers(current sensitive modifier keys are Shift key and Fn key); latch/unlatch, lock/unlock the modifiers,
  auto-capitalization; auto-lock Fn key when focus changing to number/phone number content type etc.
  There are three states of a modifier key: \a Clear, \a Latched, and \a Locked. The MHardWareKeyboard keeps
  the states of modifier keys (Shift, Sym and Fn) until the widget loses the focus.
  See meego-im-framework/doc/src/internals.dox section KeyEventFiltering for more detail.
*/
class MHardwareKeyboard : public QObject
{
    Q_OBJECT

public:
    class  ModifierKey
    {
    public:
        ModifierKey(Qt::KeyboardModifier m = Qt::NoModifier, ModifierState s = ModifierClearState);

        Qt::KeyboardModifier modifier;
        ModifierState state;
        //! For some state, e.g Latched state, which need a middle state before being able to move to lock state.
        bool inBetweenPressRelease;
    };

    class RedirectedKey
    {
    public:
        RedirectedKey(Qt::Key key, bool eatKey, bool eatSelf);
        void reset();

        Qt::Key keyCode;
        bool eatInBetweenKeys;
        bool eatItself;
        bool pressed;
        //! For symbol key, indicates whether there are some character keys being pressed when
        //it is held (pressed equal true).
        bool charKeyClicked;
        QChar lastClickedCharacter;
        int charKeyClickedCount;
        ModifierKey modifier;
    };

    /*!
     * \brief Constructor for creating an MHardwareKeyboard object.
     * \param parent Parent object.
     */
    MHardwareKeyboard(QObject *parent = 0);

    //! Destructor
    ~MHardwareKeyboard();

    /*!
     *  \brief Sets keyboard type according text entry type.
     */
    void setKeyboardType(M::TextContentType type);

    /*!
     * \brief Gets current state for \a modifier key in hardware keyboard.
     */
    ModifierState modifierState(Qt::KeyboardModifier modifier) const;

    //! Set auto capitalization state.
    void setAutoCapitalization(bool caps);

    //! Reset state, clear recorded modifiers.
    void reset();

    /*!
     * \brief Filter input key events that come from the hardware keyboard.
     *
     * Exception: the key event may also come from the symbol view.
     *
     * See meego-im-framework/doc/src/internals.dox section KeyEventFiltering for more detail.
     *
     * \return true if the event was handled, false otherwise
     */
    bool filterKeyEvent(bool forceProcessing, QEvent::Type keyType, Qt::Key keyCode,
                        Qt::KeyboardModifiers modifiers, const QString &text,
                        bool autoRepeat, int count, int nativeScanCode);

    /*!
     * \brief Returns whether the symbol view is available for current layout.
     */
    bool symViewAvailable() const;

public slots:
    //! Handle indicator button click.
    void handleIndicatorButtonClick();

signals:

    //! Emitted when symbol key is clicked.
    void symbolKeyClicked();

    //! Emitted when shift state is changed.
    void shiftLevelChanged();

    //! Emitted when the state of one modifier is changed
    void modifierStateChanged(Qt::KeyboardModifier modifier, ModifierState state);

    /*!
     * \brief Emitted when symbol key and character key are clicked together.
     *
     * Accented letter can be entered by holding down the Sym key and pressing a character key. E.g. by pressing
     * Sym + a (in lower case mode), the user could enter lower case accented versions of "a" (e.g. האגבדו).
     * The accented character should be \a committed, when pressing another character key or releasing Sym key.
     *
     * \param c Accented character generated by symbol key and character key clicking.
     * \param keyCode The key code of the accented character. \sa Qt::Key.
     * \param committed Indicate whether this accented character should be committed.
     */
    void symbolCharacterKeyClicked(const QChar &c, int keyCode, bool committed = false);

private:

    //! Initialize
    void init();

    /*!
     * \brief Translates the input key code to Qt::KeyboardModifiers.
     *
     *  If the input key is not a modifier key, return Qt::NoModifier.
     */
    static Qt::KeyboardModifier keyToModifier(Qt::Key keyCode);

    /*!
     *\brief Returns the index of the matched redirected key in sensitiveKeys according \a keyCode.
     */
    int redirectedKeyIndex(Qt::Key keyCode) const;

    /*!
     *\brief Returns the index of the matched redirected key in sensitiveKeys according \a modifier.
     */
    int redirectedKeyIndex(Qt::KeyboardModifier modifier) const;

    /*!
     * \brief Sets state for \a modifier.
     * \param modifier Describes the modifier key.
     * \param targetState The state to be set.
     */
    void setModifierState(Qt::KeyboardModifier modifier, ModifierState targetState);

    /*!
     * \brief Sets state for \a modifierKey.
     * \param modifierKey Describes the modifier key.
     * \param targetState The state to be set.
     */
    void setModifierState(ModifierKey &modifierKey, ModifierState targetState);

    //! Handle modifier key press.
    void modifierKeyPress(ModifierKey &targetModifierKey);

    //! Handle modifier key release.
    void modifierKeyRelease(ModifierKey &targetModifierKey);

    //! Handle symbol key click.
    void symbolKeyClick();

    //! Composes a accented character for symbol key + character key press.
    void composeAccentedCharacter(Qt::Key keyCode, const QString &text);

    //! Handle character key click.
    void characterKeyClick(Qt::Key keyCode, const QString &text);

    //! commit last clicked accented character.
    void commitAccentedCharacter();

    //! Return true if there's currently one or more sensitive keys in pressed state
    bool isSensitiveKeyPressed() const;

    //! Return true if the \a state is valid for \a modifier.
    bool isValidModifierState(Qt::KeyboardModifier modifier, ModifierState state);

    M::TextContentType keyboardType;
    MXkb mXkb;
    bool autoCaps;
    QList<RedirectedKey> sensitiveKeys;
    bool filterNextKey;
    HwKbCharLoopsManager hwkbCharLoopsManager;

    friend class Ut_MHardwareKeyboard;
    friend class Ft_MHardwareKeyboard;
};

#endif
